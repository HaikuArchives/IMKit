#!/bin/sh
#
# Copyright 2008, IM Kit Team.
# Distributed under the terms of the MIT License.
#
# Authors:
#		Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#

current_dir=`pwd`

debug=1
checkmem=0
is_haiku=0
is_zeta=0
is_beos=0
ssl_incdir=""
ssl_libdir=""
yahoo2_incdir=""
yahoo2_libdir=""
defines=""

# Argument parsing
while [ $# != 0 ]; do
	flag="$1"
	case "$flag" in
		--disable-debug) debug=0 ;;
		--check-mem) checkmem=1 ;;
		*)
			echo "Usage: $0 [OPTION]..."
			echo -e "\t-h, --help\t\tShow this usage information"
			echo -e "\t--check-mem\t\tEnable memory checking"
			echo -e "\t--disable-debug\t\tDisable debugging"
			exit 1
		;;
	esac
	shift
done

# Replacement for which to make it work in Zeta
function which_replacement()
{
 	location=`which $1 2>/dev/null`
 
 	if [ -z "$location" ]; then
 		for p in `echo $PATH | awk '$1=$1' RS=: OFS="\n"`; do 
 			if [ -x $p/$1 ]; then 
 				location=$p/$1
 				break
 			fi 
 		done 
 	fi

	echo $location
 	return
}

# Binaries
jambin=`which_replacement jam`
rcbin=`which_replacement rc`
xresbin=`which_replacement xres`
settypebin=`which_replacement settype`
mimesetbin=`which_replacement mimeset`
setversionbin=`which_replacement setversion`
copyattrbin=`which_replacement copyattr`
svgicontool=`which_replacement IconTool`

# Libraries
have_infopopper=0
have_openssl=0
have_libyahoo2=0

# Get common directories
common_dir=`finddir B_COMMON_DIRECTORY`
common_bindir=`finddir B_COMMON_BIN_DIRECTORY`
common_incdir="$common_dir/include"
common_libdir=`finddir B_COMMON_LIB_DIRECTORY`
common_serversdir=`finddir B_COMMON_SERVERS_DIRECTORY`
common_addonsdir=`finddir B_COMMON_ADDONS_DIRECTORY`
common_devdir=`finddir B_COMMON_DEVELOP_DIRECTORY`
user_confdir=`finddir B_USER_CONFIG_DIRECTORY`
beos_sysdir=`finddir B_BEOS_SYSTEM_DIRECTORY`
beos_prefsdir=`finddir B_BEOS_PREFERENCES_DIRECTORY`
appsdir=`finddir B_APPS_DIRECTORY`

# Check whether jam exists
echo -n "Checking whether jam exists... "
if [ -z "$jambin" ]; then
	echo "not found"
	echo "*** IM Kit requires jam, please read our Build.txt file."
	exit 1
else
	echo "found"
fi

# Check operating system
system=`uname -s`
release=`uname -r`
echo -n "Checking operating system... "
case "$system" in
	BeOS)
		case "$release" in
			5.*)
				is_beos=1
				defines="BEOS=1 NETSERVER_BUILD=1"
			;;
			6.*)
				is_zeta=1
				defines="ZETA=1 BONE_BUILD=1"
			;;
			*)
				echo "*** Unsupported $system operating system."
				exit 1
			;;
		esac
	;;
	Haiku)
		is_haiku=1
		defines="HAIKU_TARGET_PLATFORM_HAIKU=1 HAIKU=1 BONE_BUILD=1"
		echo "$system $release"
	;;
	*)
		echo "*** Unsupported $system operating system."
		exit 1
	;;
esac

# Check for rc
echo -n "Checking for rc... "
if [ -z "$rcbin" ]; then
	echo "not found"
	exit 1
fi
echo $rcbin

# Check for xres
echo -n "Checking for xres..."
if [ -z "$xresbin" ]; then
	echo "not found"
	exit 1
fi
echo $xresbin

# Check for settype
echo -n "Checking for settype..."
if [ -z "$settypebin" ]; then
	echo "not found"
	exit 1
fi
echo $settypebin

# Check for mimeset
echo -n "Checking for mimeset..."
if [ -z "$mimesetbin" ]; then
	echo "not found"
	exit 1
fi
echo $mimesetbin

# Check for setverion
echo -n "Checking for setversion..."
if [ -z "$setversionbin" ]; then
	echo "not found"
	exit 1
fi
echo $setversionbin

# Check for copyattr
echo -n "Checking for copyattr..."
if [ -z "$copyattrbin" ]; then
	echo "not found"
	exit 1
fi
echo $copyattrbin

# Check for OpenSSL headers
echo -n "Checking for OpenSSL headers..."
if [ -f $common_devdir/headers/openssl/ssl.h -o \
     -f $user_confdir/include/openssl/ssl.h -o \
     -f $common_incdir/openssl/ssl.h ]; then
	echo "found"
	[ -f $common_devdir/headers/openssl/ssl.h ] && ssl_incdir=$common_devdir/headers
	[ -f $user_confdir/include/openssl/ssl.h ] && ssl_incdir=$user_confdir/include
	[ -f $common_incdir/openssl/ssl.h ] && ssl_incdir=$common_incdir
	have_openssl=1
else
	echo "not found"
	have_openssl=0
fi

# Check for OpenSSL libraries only if we have headers too
if [ $have_openssl -eq 1 ]; then
	# Check for OpenSSL libraries
	echo -n "Checking for OpenSSL libraries..."
	if [ -f $user_confdir/lib/libssl.so -a \
	     -f $user_confdir/lib/libcrypto.so ]; then
		echo "found"
		ssl_libdir=$user_confdir/lib
		have_openssl=1
	elif [ -f $beos_sysdir/lib/libssl.so -a \
	     -f $beos_sysdir/lib/libcrypto.so ]; then
		echo "found"
		ssl_libdir=$beos_sysdir/lib
		have_openssl=1
	elif [ -f $common_libdir/libssl.so -a \
	     -f $common_libdir/libcrypto.so ]; then
		echo "found"
		ssl_libdir=$common_libdir
		have_openssl=1
	else
		echo "not found"
		have_openssl=0
	fi
fi

# Check for libyahoo2 headers
echo -n "Checking for libyahoo2 headers..."
if [ -f $common_incdir/libyahoo2/yahoo2.h ]; then
	echo "found"
	yahoo2_incdir=$common_incdir
	have_libyahoo2=1
else
	echo "not found"
	have_libyahoo2=0
fi

# Check for libyahoo2 libraries only if we have headers too
if [ $have_libyahoo2 -eq 1 ]; then
	# Check for libyahoo2 libraries
	echo -n "Checking for libyahoo2 libraries..."
	if [ -f $common_libdir/libyahoo2.so ]; then
		echo "found"
		yahoo2_libdir=$common_libdir
		have_libyahoo2=1
	else
		echo "not found"
		have_libyahoo2=0
	fi
fi

# Check for InfoPopper
echo -n "Checking for InfoPopper..."
if [ -f $common_libdir/libinfopopper.so -o \
     -f $common_devdir/headers/libinfopopper/InfoPopper.h ]; then
	echo "found"
	have_infopopper=1
else
	echo "not found"
	have_infopopper=0
fi

# Create the build configuration
cat > $current_dir/BuildConfig << EOF
IMKIT_DEBUG = ${debug} ;
IMKIT_CHECKMEM = ${checkmem} ;
IMKIT_OPENSSL_INCDIR = ${ssl_incdir} ;
IMKIT_OPENSSL_LIBDIR = ${ssl_libdir} ;
IMKIT_LIBYAHOO2_INCDIR = ${yahoo2_incdir} ;
IMKIT_LIBYAHOO2_LIBDIR = ${yahoo2_libdir} ;

IMKIT_COMMON_BIN_DIRECTORY = ${common_bindir} ;
IMKIT_COMMON_LIB_DIRECTORY = ${common_libdir} ;
IMKIT_COMMON_SERVERS_DIRECTORY = ${common_serversdir} ;
IMKIT_COMMON_ADDONS_DIRECTORY = ${common_addonsdir} ;
IMKIT_COMMON_DEVELOP_DIRECTORY = ${common_devdir} ;
IMKIT_USER_CONFIG_DIRECTORY = ${user_confdir} ;
IMKIT_BEOS_SYSTEM_DIRECTORY = ${beos_sysdir} ;
IMKIT_BEOS_PREFERENCES_DIRECTORY = ${beos_prefsdir} ;
IMKIT_APPS_DIRECTORY = ${appsdir} ;

IMKIT_BUILD_DATE = `date +"%Y-%m-%d"` ;
IMKIT_BUILD_REVISION = `svnversion .` ;

IMKIT_IS_HAIKU = ${is_haiku} ;
IMKIT_IS_BEOS = ${is_beos} ;
IMKIT_IS_ZETA = ${is_zeta} ;
IMKIT_HAVE_INFOPOPPER = ${have_infopopper} ;
IMKIT_HAVE_OPENSSL = ${have_openssl} ;
IMKIT_HAVE_LIBYAHOO2 = ${have_libyahoo2} ;

RC = ${rcbin} ;
XRES = ${xresbin} ;
SETTYPE = ${settypebin} ;
MIMESET = ${mimesetbin} ;
SETVERSION = ${setversionbin} ;
COPYATTR = ${copyattrbin} ;
SVGICONTOOL = ${svgicontool} ;

DEFINES += ${defines} ;
EOF

echo "Configuration done."

##	BeOS Generic Makefile Engine v2.4.0
##	Does all the hard work for the Generic Makefile
##	which simply defines the project parameters

##	Supports Generic Makefile v2.0, 2.01, 2.1, 2.2, 2.3, 2.4

#setting LIBPATHS
LIBPATHS+=$(TOPDIR)/build/lib
SYSTEM_INCLUDE_PATHS+=$(TOPDIR)

#	determine wheather running on x86 or ppc
MACHINE=$(shell uname -m)
ifeq ($(MACHINE), BePC)
	CPU = x86
else
	CPU = ppc
endif

#	set the directory where object files and binaries will be created
ifeq ($(OBJ_DIR), )
	OBJ_DIR		:= obj.$(CPU)
endif

#	create some default settings
ifeq ($(NAME), )
	NAME := NameThisApp
endif
	
ifeq ($(TYPE), )
	TYPE := APP
endif

ifeq ($(DRIVER_PATH), )
	DRIVER_PATH := misc
endif

# 	specify that the binary should be created in the object directory by default
ifeq ($(TARGET_DIR), )
	TARGET_DIR	:= $(OBJ_DIR)
else
	
	DUMMY:=$(shell mkdir -p "$(TARGET_DIR)")
endif

#	the target goes in the TARGET_DIR
TARGET		:= $(TARGET_DIR)/$(NAME)

#	specify the mimeset tool
MIMESET		:= mimeset

#	specify the tools for adding and removing resources
XRES		:= xres

# 	platform specific settings

#	x86 Settings
ifeq ($(CPU), x86)
#	set the compiler and compiler flags
	CC		=	gcc

#	SETTING: set the CFLAGS for each binary type	
	ifeq ($(TYPE), DRIVER)
		CFLAGS	+= -D_KERNEL_MODE=1 -no-fpic
	else
		CFLAGS +=
	endif

#	SETTING: set the proper optimization level
	ifeq ($(OPTIMIZE), FULL)
		OPTIMIZER	= -O3
	else
	ifeq ($(OPTIMIZE), SOME)
		OPTIMIZER	= -O1
	else
	ifeq ($(OPTIMIZE), NONE)
		OPTIMIZER	= -O0
	else
#		OPTIMIZE not set so set to good
		OPTIMIZER	= -O2
	endif
	endif
	endif
		
#	SETTING: set proper debugger flags
	ifeq ($(DEBUGGER), TRUE)
		DEBUG += -g
		OPTIMIZER = -O0
	endif
		
	CFLAGS += $(OPTIMIZER) $(DEBUG)

#	SETTING: set warning level
	ifeq ($(WARNINGS), ALL )
		CFLAGS += -W -Wall -Wno-multichar -Wno-ctor-dtor-privacy -Woverloaded-virtual -Wreturn-type -Wnon-virtual-dtor
	else
	ifeq ($(WARNINGS), NONE)
		CFLAGS += -w
	endif
	endif

#	set the linker and linker flags
	LD			= gcc
	LDFLAGS		+= $(DEBUG)

#	SETTING: set linker flags for each binary type
	ifeq ($(TYPE), APP)
		LDFLAGS += -Xlinker -soname=_APP_
	else
	ifeq ($(TYPE), SHARED)
		LDFLAGS += -nostart -Xlinker -soname=$(NAME)
	else
	ifeq ($(TYPE), DRIVER)
		LDFLAGS += -nostdlib /boot/develop/lib/x86/_KERNEL_
	endif 
	endif 
	endif 

	
else

#	ppc Settings
ifeq ($(CPU), ppc)
#	set the compiler and compiler flags
	CC		=	mwcc
	CFLAGS	+=	

#	SETTING: set the proper optimization level
	ifeq ($(OPTIMIZE), FULL)
		OPTIMIZER	= -O7
	else
	ifeq ($(OPTIMIZE), SOME)
		OPTIMIZER	= -O3
	else
	ifeq ($(OPTIMIZE), NONE)
		OPTIMIZER	= -O0
	else
#		OPTIMIZE not set so set to full
		OPTIMIZER	= -O7
	endif
	endif
	endif

	#set the proper debugger settings
	ifeq ($(DEBUGGER), TRUE)
		DEBUG += -g
	endif	

	CFLAGS += $(OPTIMIZER) $(DEBUG)

#	SETTING: set warning level
	ifeq ($(WARNINGS), ALL)
		CFLAGS += -w on -requireprotos
	else
	ifeq ($(WARNINGS), NONE)
		CFLAGS += -w off
	endif
	endif

# clear the standard environment variable
# now there are no standard libraries to link against
	BELIBFILES :=

#	set the linker and linker flags
	LD			= mwldppc

#	SETTING: set linker flags for each binary type
	ifeq ($(TYPE), APP)
		LDFLAGS += 
	else
	ifeq ($(TYPE), SHARED)
		LDFLAGS += 	-xms 
	endif
	endif

	ifeq ($(TYPE), DRIVER)
		LDFLAGS += -nodefaults \
					-export all \
					-G \
					/boot/develop/lib/ppc/glue-noinit.a \
					/boot/develop/lib/ppc/_KERNEL_
	else
		LDFLAGS +=	-export pragma \
					-init _init_routine_ \
					-term _term_routine_ \
					-lroot \
					/boot/develop/lib/ppc/glue-noinit.a \
					/boot/develop/lib/ppc/init_term_dyn.o \
					/boot/develop/lib/ppc/start_dyn.o 
	endif			
	
	
#	SETTING: output symbols in an xMAP file
	ifeq ($(SYMBOLS), TRUE)
		LDFLAGS += -map $(TARGET).xMAP
	endif

#	SETTING: output debugging info to a .SYM file
	ifeq ($(DEBUGGER), TRUE)
		LDFLAGS += -g -osym $(TARGET).SYM
	endif

endif
endif

#	The Resource Definition application
BERES := beres


# psuedo-function for converting a list of source files in SRCS variable
# to a corresponding list of object files in $(OBJ_DIR)/xxx.o
# The "function" strips off the src file suffix (.ccp or .c or whatever)
# and then strips of the directory name, leaving just the root file name.
# It then appends the .o suffix and prepends the $(OBJ_DIR)/ path
define SRCS_LIST_TO_OBJS
	$(addprefix $(OBJ_DIR)/, $(addsuffix .o, $(foreach file, $(SRCS), \
	$(basename $(notdir $(file))))))
endef

define RDEFS_LIST_TO_RSRCS
	$(addprefix $(OBJ_DIR)/, $(addsuffix .rsrc, $(foreach file, $(RDEFS), \
	$(basename $(notdir $(file))))))
endef

OBJS = $(SRCS_LIST_TO_OBJS)
ifneq ($(RDEFS), )
	RSRCS += $(RDEFS_LIST_TO_RSRCS)
endif

# create a unique list of paths to our sourcefiles
SRC_PATHS += $(sort $(foreach file, $(SRCS), $(dir $(file))))

# add source paths to VPATH if not already present
VPATH :=
VPATH += $(addprefix :, $(subst  ,:, $(filter-out $($(subst, :, ,$(VPATH))), $(SRC_PATHS))))

#	SETTING: build the local and system include paths
ifeq ($(CPU), x86)
	LOC_INCLUDES = $(foreach path, $(SRC_PATHS) $(LOCAL_INCLUDE_PATHS), $(addprefix -I, $(path)))
	SYS_INCLUDES += -I-
	SYS_INCLUDES += $(foreach path, $(SYSTEM_INCLUDE_PATHS), $(addprefix -I, $(path)))
else
ifeq ($(CPU), ppc)
	LOC_INCLUDES = $(foreach path, $(SRC_PATHS) $(LOCAL_INCLUDE_PATHS), $(addprefix -I, $(path)))
	SYS_INCLUDES += -i-
	SYS_INCLUDES += $(foreach path, $(SYSTEM_INCLUDE_PATHS), $(addprefix -i , $(path)))
endif
endif

INCLUDES = $(LOC_INCLUDES) $(SYS_INCLUDES)

# SETTING: add the -L prefix to all library paths to search
LINK_PATHS = $(foreach path, $(SRC_PATHS) $(LIBPATHS), \
	$(addprefix -L, $(path)))

#	SETTING: specify the additional libraries to link against
#	if the libraries have a .so or .a prefix, or if they are _APP_ or _KERNEL_
#	simply add them to the list
LINK_LIBS += $(filter %.so %.a _APP_ _KERNEL_, $(LIBS))
#	if the libraries do not have suffixes and are not _APP_ or _KERNEL_
#	prepend -l to each name: be becomes -lbe
LINK_LIBS += $(foreach lib, $(filter-out %.so %.a _APP_ _KERNEL_, $(LIBS)), $(addprefix -l, $(lib)))

# add to the linker flags 
LDFLAGS += $(LINK_PATHS)  $(LINK_LIBS)

#	SETTING: add the defines to the compiler flags
CFLAGS += $(foreach define, $(DEFINES), $(addprefix -D, $(define)))

#	SETTING: add the additional compiler flags
CFLAGS += $(COMPILER_FLAGS)

#	You can use this to add flags from the command line.
#	Just use the syntax $ ADDL_CLFAGS='bla bla' make
CFLAGS += $(ADDL_CFLAGS)

#	SETTING: add the additional linker flags
LDFLAGS += $(LINKER_FLAGS)

#	SETTING: use the archive tools if building a static library
#	otherwise use the linker
ifeq ($(TYPE), STATIC)
	BUILD_LINE = ar -cru "$(TARGET)" $(OBJS)
else
	BUILD_LINE = $(LD) -o "$@" $(OBJS) $(LDFLAGS)
endif

#	create the resource instruction
ifeq ($(RSRCS), )
	DO_RSRCS := \
	if [ -f "$(SVG_ICON)" ]; then \
		if [ -f "/bin/IconTool" ] ; then \
			IconTool "$(TARGET)" Build STD_ICON 1 -1 SVG "$(SVG_ICON)"; \
		fi; \
		if [ -f "/boot/home/config/bin/loadicon" ]; then \
			loadicon "$(SVG_ICON)" "$(TARGET)"; \
		fi; \
	fi 
else
	DO_RSRCS := \
	$(XRES) -o $(TARGET) $(RSRCS) ; \
	if [ -f "$(SVG_ICON)" ] ; then \
		if [ -f "/bin/IconTool" ] ; then \
			IconTool "$(TARGET)" Build STD_ICON 1 -1 SVG "$(SVG_ICON)"; \
		fi; \
		if [ -f "/boot/home/config/bin/loadicon" ]; then \
			loadicon "$(SVG_ICON)" "$(TARGET)"; \
		fi;\
	fi
endif

# Install target helper
ifeq ($(INSTALL_DIR), )
	ifeq ($(TYPE), SHARED)
		INSTALL_DIR := /boot/home/config/lib
	else
		ifeq ($(TYPE), STATIC)
			INSTALL_DIR := /boot/develop/lib/$(CPU)
		else
			INSTALL_DIR := /boot/home/config/bin
		endif
	endif
endif

# Another install helper for shared targets
ifeq ($(TYPE), SHARED)
	DO_SHARED :=  ln -sf "$(INSTALL_DIR)/$(NAME)" "/boot/develop/lib/x86"
else
	DO_SHARED :=
endif

# Link install goodies
ifeq ($(MENU_LINKS), TRUE)
	ifeq ($(APP_TYPE), PREF)
		DO_LINKS := ln -sf "$(INSTALL_DIR)/$(NAME)" "$(HOME)/config/be/Preferences/"
	else
		DO_LINKS := ln -sf "$(INSTALL_DIR)/$(NAME)" "$(HOME)/config/be/Applications/"
	endif
else
	DO_LINKS :=
endif
	

# Dependencies related junk
DEP_DIR := dep

# create the dep dir.
MAKEDEP		:= $(shell mkdir -p $(DEP_DIR))

DEPENDS		:= $(addprefix $(DEP_DIR)/,$(addsuffix .d,$(foreach file, $(SRCS),$(basename $(notdir $(file))))))
DEP			:= gcc -MM $(INCLUDES) $(CFLAGS)
TEMPDEPFILE	:= /tmp/makefile-enine_temp_deps

DEP_MSG 	= @/bin/echo generating dependencies for $<
DEP_STAGE1	= @/bin/echo $@ $(OBJ_DIR)/$(shell $(DEP) $<) > $(TEMPDEPFILE)
DEP_STAGE2	= @/bin/echo $(OBJ_DIR)/$(basename $(@F))".o : $(MAKEFILE)" | /bin/cat - $(TEMPDEPFILE) > $@

# Dependency generation for PPC, old school.
ifeq ($(CPU), ppc)
	DEPFLAG = -make
	SEDSCRIPT = sed -e'/\/boot\/develop\/headers\/.*\\/d' -e's%^.*/boot/develop/headers/.*% %g' -e's%^.*/\([^/]*\.o\)%$$(OBJ_DIR)/\1%' -e"s%`pwd`/%%g"
	DO_DEPENDS = $(CC) $(INCLUDES) $(CFLAGS) $(DEPFLAG) $(SRCS) | $(SEDSCRIPT) > .dependencies
else
	DO_DEPENDS = 
endif

#	define the actual work to be done	
.PHONY: default build clean install cleandep rmapp

default: build

build: $(TARGET)

$(TARGET):	$(OBJ_DIR) $(OBJS) $(RSRCS)
		@rm -f $(TEMPDEPFILE)
		$(BUILD_LINE)
		$(DO_RSRCS)
		$(MIMESET) -f $@
		$(DO_ATTRS)


#	rule to create the object file directory if needed
$(OBJ_DIR)::
	@[ -d $(OBJ_DIR) ] || mkdir $(OBJ_DIR) > /dev/null 2>&1

.SUFFIXES: .c .cpp .cp .cc .C .CC .CPP

$(OBJ_DIR)/%.o : %.c
	$(CC) -c $< $(INCLUDES) $(CFLAGS) -o $@
$(OBJ_DIR)/%.o : %.cpp
	$(CC) -c $< $(INCLUDES) $(CFLAGS) -o $@
$(OBJ_DIR)/%.o : %.cp
	$(CC) -c $< $(INCLUDES) $(CFLAGS) -o $@
$(OBJ_DIR)/%.o : %.cc
	$(CC) -c $< $(INCLUDES) $(CFLAGS) -o $@
$(OBJ_DIR)/%.o : %.C
	$(CC) -c $< $(INCLUDES) $(CFLAGS) -o $@
$(OBJ_DIR)/%.o : %.CC
	$(CC) -c $< $(INCLUDES) $(CFLAGS) -o $@
$(OBJ_DIR)/%.o : %.CPP
	$(CC) -c $< $(INCLUDES) $(CFLAGS) -o $@

# Dependency related rules

$(DEP_DIR)/%.d : %.c
	$(DEP_MSG)
	$(DEP_STAGE1)
	$(DEP_STAGE2)

$(DEP_DIR)/%.d : %.cpp
	$(DEP_MSG)
	$(DEP_STAGE1)
	$(DEP_STAGE2)

$(DEP_DIR)/%.d : %.cp
	$(DEP_MSG)
	$(DEP_STAGE1)
	$(DEP_STAGE2)

$(DEP_DIR)/%.d : %.cc
	$(DEP_MSG)
	$(DEP_STAGE1)
	$(DEP_STAGE2)

$(DEP_DIR)/%.d : %.C
	$(DEP_MSG)
	$(DEP_STAGE1)
	$(DEP_STAGE2)

$(DEP_DIR)/%.d : %.CC
	$(DEP_MSG)
	$(DEP_STAGE1)
	$(DEP_STAGE2)

$(DEP_DIR)/%.d : %.CPP
	$(DEP_MSG)
	$(DEP_STAGE1)
	$(DEP_STAGE2)


# For RDef files (some tracker thing)
$(OBJ_DIR)/%.rsrc : %.rdef
	$(BERES) -o $@ $<

#	rules to handle lex/flex and yacc/bison files

$(OBJ_DIR)/%.o: %.l
	flex $<
	$(CC) -c $(INCLUDES) $(CFLAGS) lex.yy.c -o $@
$(OBJ_DIR)/%.o: %.y
	bison -d -y $<
	$(CC) -c $(INCLUDES) $(CFLAGS) y.tab.c -o $@

#	empty rule. Things that depend on this rule will always get triggered
FORCE:

#	Clean up the deps
cleandep :: FORCE
	-rm -rf $(DEP_DIR)

#	The  clean command. Delete everything in the object and dep folders.
clean :: cleandep
	-rm -rf $(OBJ_DIR)


#	remove just the application from the object folder
rmapp ::
	-rm -f $(TARGET)

# condtional depends target
depend :: FORCE
	$(DO_DEPENDS)
	@echo Dependencies updated.

# make it easy to install drivers for testing
USER_BIN_PATH = /boot/home/config/add-ons/kernel/drivers/bin
USER_DEV_PATH = /boot/home/config/add-ons/kernel/drivers/dev

driverinstall ::
ifeq ($(TYPE), DRIVER)
	copyattr --data $(OBJ_DIR)/$(NAME) $(USER_BIN_PATH)/$(NAME)
	mkdir -p $(USER_DEV_PATH)/$(DRIVER_PATH)
	ln -sf $(USER_BIN_PATH)/$(NAME) $(USER_DEV_PATH)/$(DRIVER_PATH)/$(NAME)
endif
	
install ::
	mkdir -p "$(INSTALL_DIR)"
	copyattr --data $(TARGET) "$(INSTALL_DIR)/$(NAME)"	
# having 2 copies of the same binary on a system seems silly.
	rm $(TARGET)
# Create the link to the develop lib path
	$(DO_SHARED)	
# Create the link to the BeMenu lib path
	$(DO_LINKS)	
# Additional install commands
	$(ADDL_INSTALL)

		
# delete the deps dir if we want to recreate all the dependencies
ifeq ($(CPU), x86)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),cleandep)
-include $(DEPENDS)
endif
endif
else
-include .dependencies
endif
